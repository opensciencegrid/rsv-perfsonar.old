#!/usr/bin/python

import os
import re
import subprocess
import sys
import rsvprobe
import time
import random

import time
from time import strftime
from time import localtime

sys.path.insert(0, '.')
class PerfsonarSimpleProbe(rsvprobe.RSVProbe):
    """
    TODO - write description of the probe
    """
    def __init__(self):
        rsvprobe.RSVProbe.__init__(self)
        self.metric = ""
        metric = rsvprobe.RSVMetric("Perfsonar-Monitor",
                                    "org.osg.general.perfsonar-simple", rsvprobe.RSVMetric.STATUS)
        self.supported_metrics = [metric]
        self.details = "---\n"
        # the default values
        # username for uploading ifnormation to the goc
        self.username = "afitz"
        # key for uploading information to the goc
        self.key = "fc077a6a133b22618172bbb50a1d3104a23b2050"
        # The goc_url is the url for where to upload the data
        self.goc_url = "http://osgnetds.grid.iu.edu"
        self.start = 43200
        self.sleep = 400
        self.debug = False
        self.maxstart = 43200
        self.summaries = False
        # Add the options so the parsing knows what to expect
        self.addopt("", "username=", "--username username the username for uploading data to the goc")
        self.addopt("", "key=", "--key key the key for uploading data to the goc")
        self.addopt("", "goc=", "--goc url the url for where to upload the data (i.e http://osgnetds.grid.iu.edu)")
        self.addopt("", "start=", "--start How back in history get data from perfsonar ndoe in secs (i.e 43200)")
        self.addopt("", "sleep=", "--sleep Number of seconds to sleep at most before start running the probe (i.e 300). Actual number is random")
        self.addopt("", "debug=", "--debug True or False. For if extra debugging is needed")
        self.addopt("", "timeout=", "--timeout Seconds. A softimeout for how long the probes are allowed to run")
        self.addopt("", "summary=", "--summary True or False. Read and upload data summaries or not")
        self.addopt("", "maxstart=", "--maxstart the max number in seconds it will go in the past to retrieve information")

    def parseopt(self):
        """parse options specific to network monitroing probe and return options, optlist and reminder to
        allow further processing
        """
        options, optlist, remainder = rsvprobe.RSVProbe.parseopt(self)
        for opt, arg in options:
            if opt == '--username':
                self.username = arg
            elif opt == '--key':
                self.key = arg
            elif opt == '--goc':
                self.goc_url = arg
            elif opt == '--start':
                self.start = arg
            elif opt == '--sleep':
                self.sleep = arg
            elif opt == '--debug':
                self.debug = arg
            elif opt == '--timeout':
                self.soft_timeout = arg
            elif opt == '--summary':
                self.summaries = arg
            elif opt == '--maxstart':
                self.maxstart = arg
            if self.host == self.localhost:
                self.is_local = True
            else:
                self.is_local = False
        return options, optlist, remainder

    def runCallerScript(self):
        #Runs the caller script for esmond and parses the result 
        cmd = "source ./esmondCaller.sh %s %d %s %s %s %s %s %s" % ("http://" + self.host, -int(self.start), self.username, self.key, self.goc_url, self.debug, self.soft_timeout, self.summaries)
        ec, out = rsvprobe.run_command(cmd, workdir="/usr/libexec/rsv/probes/worker-scripts")
        return out

    def ReadTimeStampFile(self, filename):
        if not os.path.isfile(filename):
            return 1
        else:
            nfile = open(filename, 'r')
            return nfile.readline()

    def createDir(self, directory):
        if not os.path.exists(directory):
            os.makedirs(directory)
        return directory
    
    def WriteNewTimestamp(self, filename, starttime):
         nfile = open(filename, 'w')
         time = strftime("%a, %d %b %Y %H:%M:%S", starttime)
         nfile.write(time)

    def computeStartTime(self, filename):
        timestamp = self.ReadTimeStampFile(filename)
        if not timestamp == 1:#The probe ran succesfully:  
           self.add_message("Last succesfull run at %s" % timestamp)
           oldTime = time.strptime(timestamp, "%a, %d %b %Y %H:%M:%S")
           newStart = time.mktime(localtime())-time.mktime(oldTime)
           if newStart < int(self.maxstart):
               self.start = int(newStart)
        else:
            self.add_message("No previous sucesfull run found")


    def run(self):
       """Main routine for the probe"""
       startTime = localtime()
       self.parseopt()
       basedir = "/var/log/rsv/metrics/"
       directoryFile = self.createDir(basedir +self.host)
       timeFile = directoryFile + '/timeFile.out'
       self.computeStartTime(timeFile)
       self.add_message("Start Time %d " % int(self.start))
       # Need to sleep for some random time between 0 and sleep so not all probes astart at the same time.
       sleepTime = random.randint(0, int(self.sleep))
       self.add_message("Sleeping for %d secs before starting" % sleepTime)
       time.sleep(sleepTime)
       # Calling the caller script and parsing it is output
       out = self.runCallerScript()
       self.add_message(out)
       if 'Error' in out:
            self.return_critical("Failed running the caller")
       # Write the timestamp if there is a warning or ok. Even if it is a timeout warning chances are increasing starttime won't do much
       self.WriteNewTimestamp(timeFile, startTime)
       if 'WARNING' in out:
           self.return_warning('WARNING: timeout ')
       self.return_ok("OK")

def main():
    probe = PerfsonarSimpleProbe()
    return probe.run()

if __name__ == '__main__':
    sys.exit(main())
    
