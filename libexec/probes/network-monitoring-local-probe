#!/usr/bin/python

import os
import re
import subprocess
import sys
import urllib2
import rsvprobe
try:#No json on python2.4 using simplejson for now
    import json
except ImportError:
    import simplejson as json

# The maximun number of meshes allowed
max_mesh = 100

sys.path.insert(0, '.')


class NetworkMonitoringLocalProbe(rsvprobe.RSVProbe):
    """
    This master probe reads a json and parses it to obtain the urls
    of several perfsonar nodes then fires up other dummy probes that contact
    the perfsonar nodes and upload the information to myosg
    """

    def __init__(self):
        rsvprobe.RSVProbe.__init__(self)
        self.metric = ""
        self.short_metric = ""
        metric = rsvprobe.RSVMetric("Perfsonar-Monitor",
                 "org.osg.local.network-monitoring-local", rsvprobe.RSVMetric.STATUS)
        self.supported_metrics = [metric]
        self.details = "---\n"
        #Add the probe specific options
        # For addin up to max_mesh different specific meshes
        for mesh_num in range(0, max_mesh):
            mesh_opt = "mesh%d=" % mesh_num
            self.addopt("", mesh_opt, "--mesh# url of the personar mesh (ex. --mesh0 http://myosg.grid.iu.edu/pfmesh/json --mesh2 url2")
        # Adding a new super_mesh which is a json with several other meshes
        self.addopt("", "super_mesh=", "--super_mesh# url of the goc mesh which has some others (ex. --super_mesh http://myosg.grid.iu.edu/pfmesh/all?new")
        self.meshlist = []
        self.super_mesh = ""

    def parseSuperMesh(self, super_mesh):
        self.add_message("Parsing super mesh %s" % super_mesh)
        req = urllib2.Request(super_mesh)
        opener = urllib2.build_opener()
        f = opener.open(req)
        try:
            data = json.loads(f.read())
        except ValueError:
            self.return_unknown("Invalid json at %s" % (super_mesh))
        for mesh in data:
            self.meshlist.append(mesh['include'][0])


    # Reads the url from the json url and returns the url nodes of the perfsonar nodes                         
    def parseJsonUrl(self, jsonurl):
        self.add_message("Obtaining nodes from mesh %s" % jsonurl)
        req = urllib2.Request(jsonurl)
        opener = urllib2.build_opener()
        f = opener.open(req)
        try:
            data = json.loads(f.read())
        except ValueError:
            self.return_unknown("Invalid json at %s" % (jsonurl))
        if 'tests' not in data:
            self.return_unknown("Json Url format not as expected" % jsonurl)
        nodes = []
        for test in data['tests']:
            for key in test['members'].keys():
                if 'member' in key:
                    for node in test['members'][key]:
                        nodes.append(node.encode('utf-8'))
        return nodes
        
    def parseopt(self):
        """parse options specific to network monitroing probe and return options, optlist and reminder to allow further processing
        """
        options, optlist, remainder = rsvprobe.RSVProbe.parseopt(self)
        for opt, arg in options:
            # Adding the extra meshes
            if 'mesh' in  opt and ('super' not in opt):
                if arg not in self.meshlist:
                    self.meshlist.append(arg)
            if 'super' in opt:
                self.super_mesh = arg
            if self.host == self.localhost:
                self.is_local = True
            else:
                self.is_local = False
        return options, optlist, remainder

    # Enables a dummy probe for each node in nodes
    def enableDummyProbe(self, nodes):
        for node in nodes:
            cmd = "rsv-control --enable --host %s org.osg.general.perfsonar-simple" % (node)
            ec, out = rsvprobe.run_command(cmd)
            # make a warning if the dummy metric failed
            result = out.split("\n")
            if 'ERROR' in result:
                self.add_warning("Failed to enable probe failed for node: %s" % (node), exit_code=0)
            cmd = "rsv-control --on --host %s org.osg.general.perfsonar-simple" % (node)
            ec, out = rsvprobe.run_command(cmd)
            result = out.split("\n")
            if 'ERROR' in result:
                self.add_warning("Failed to turn on probe failed for node: %s" % (node), exit_code=0)
    
    # Disable the dummy probe for a list of nodes
    def disableDummyProbe(self, nodes):
        for node in nodes:
            cmd = "rsv-control --disable --host %s org.osg.general.perfsonar-simple" % (node)
            ec, out = rsvprobe.run_command(cmd)
            # make a warning if the dummy metric failed                                                                                                       
            result = out.split("\n")
            if 'ERROR' in result:
                self.add_warning("Failed to enable probe failed for node: %s" % (node), exit_code=0)
            cmd = "rsv-control --off --host %s org.osg.general.perfsonar-simple" % (node)
            ec, out = rsvprobe.run_command(cmd)
            result = out.split("\n")
            if 'ERROR' in result:
                self.add_warning("Failed to turn off probe failed for node: %s" % (node), exit_code=0)
        

    #Returns a list of nodes that are currently enabled for a given metric
    def getListEnablednodes(self, metric):
        cmd = "rsv-control --list --wide %s | grep host | awk '{print $5}'" % (metric)
        ec, out = rsvprobe.run_command(cmd)
        result = out.split("\n")
        return result

    def getListNodesToDisable(self, actualNodes, enabledNodes):
        nodesToDisable = []
        for node in enabledNodes:
            if node not in actualNodes and len(node)>0:
                nodesToDisable.append(node)
        return nodesToDisable
    
    def getListNodesToEnable(self, actualNodes, enabledNodes):
        nodesToEnable = []
        for node in actualNodes:
                if node not in enabledNodes:
                    nodesToEnable.append(node)
        return nodesToEnable

    def run(self):
        """Main routine for the probe"""
        self.parseopt()
        if len(self.super_mesh)>0:
            self.parseSuperMesh(self.super_mesh)
        #Actual nodes are the nodes that should be on according to the last reading of the mesh_rul
        actualNodes = []
        for mesh_url in self.meshlist:
            actualNodes += self.parseJsonUrl(mesh_url)
        #Enabled nodes is the list of currently enabled nodes
        self.add_message("Getting list of enabled nodes")
        enabledNodes = self.getListEnablednodes('org.osg.general.perfsonar-simple')
        self.add_message("Calculating list of enabled and disabled nodes")
        nodesToEnable = self.getListNodesToEnable(actualNodes, enabledNodes)
        nodesToDisable = self.getListNodesToDisable(actualNodes, enabledNodes)
        self .add_message("Enabling nodes %s " % nodesToEnable)
        self.enableDummyProbe(nodesToEnable)
        self.add_message("Disabling nodes %s " % nodesToDisable)
        self.disableDummyProbe(nodesToDisable)
        self.return_ok("Everything OK")

def main():
    probe = NetworkMonitoringLocalProbe()
    return probe.run()

if __name__ == '__main__':
    sys.exit(main())
